import pandas as pd
from sklearn.model_selection import train_test_split
from io import StringIO
from Connexion_database import Connexion


def preprocess(data):
    dataset = pd.read_csv(data)
    # Convertir la colonne 'date' en format datetime
    dataset['date'] = pd.to_datetime(dataset['date'])
    # Définir la colonne 'date' comme index
    dataset.set_index('date', inplace=True)

    # Utiliser la fonction resample() pour agréger les données par intervalle de 3 heures et calculer la moyenne
    new_hourly_dataframe = dataset.resample('3h').mean()

    new_hourly_dataframe_diff = (new_hourly_dataframe - new_hourly_dataframe.shift(1))[1:]

    len_train = int(len(new_hourly_dataframe) * 0.65)
    len_val = int(len(new_hourly_dataframe) * 0.2)
    ind_split_1 = len_train
    ind_split_2 = len_train + len_val

    ts_train = new_hourly_dataframe_diff[:ind_split_1]

    ts_val = new_hourly_dataframe_diff[ind_split_1:ind_split_2]
    ts_test = new_hourly_dataframe_diff[ind_split_2:]
    return new_hourly_dataframe_diff, ts_train, ts_test

def get_mean_by_cat(data, cat_feature, value_feature):
    return dict(data.groupby(cat_feature)[value_feature].mean())

def preprocess_data(data, lag_start=1, lag_end=8, test_size=0.15):

    data = pd.DataFrame(data.copy())

    # add time series lags as features
    for i in range(lag_start, lag_end):
        data[f"lag_{i}"] = data['temperature_2m'].shift(i)

    # drop NaNs generated by adding lag features
    data = data.dropna()

    data["Jours"] = data.index.month

    X = data.drop("temperature_2m", axis=1)
    y = data["temperature_2m"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, shuffle=False)

    # calculate average values only on train data to avoid data leak
    monthly_average = get_mean_by_cat(data.loc[X_train.index], "Jours", "temperature_2m")
    X_train["Jours_average"] = list(map(monthly_average.get, X_train["Jours"]))
    X_test["Jours_average"] = list(map(monthly_average.get, X_test["Jours"]))

    # drop features that have been used for calculating average values of the target variable
    X_train.drop(["Jours"], axis=1, inplace=True)
    X_test.drop(["Jours"], axis=1, inplace=True)

    return X_train, X_test, y_train, y_test


#donne = Connexion()
#new_hourly_dataframe_diff, ts_train, ts_test = preprocess(donne)

#print(new_hourly_dataframe_diff)